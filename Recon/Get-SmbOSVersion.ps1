function Get-SmbOSVersion {
<#
.SYNOPSIS
    Get the OS version of remote computer.
    Privileges required: none

    Author: TimothÃ©e MENOCHET (@_tmenochet)

.DESCRIPTION
    Get-SmbOSVersion detects OS version of a remote host via SMBv2 protocol.
    It is a PowerShell implementation of smb2os by @w1u0u1.

.PARAMETER ComputerName
    Specifies the target host.

.EXAMPLE
    PS C:\> Get-SmbOSVersion -ComputerName DC.ADATUM.CORP
#>

    [CmdletBinding()]
    Param (
        [ValidateNotNullOrEmpty()]
        [string]
        $ComputerName = $env:COMPUTERNAME
    )

    [byte[]] $request1 = 0x00,0x00,0x00,0x45,0xff,0x53,0x4d,0x42,0x72,0x00,0x00,0x00,0x00,0x18,0x53,0xc8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x22,0x00,0x02,0x4e,0x54,0x20,0x4c,0x4d,0x20,0x30,0x2e,0x31,0x32,0x00,0x02,0x53,0x4d,0x42,0x20,0x32,0x2e,0x30,0x30,0x32,0x00,0x02,0x53,0x4d,0x42,0x20,0x32,0x2e,0x3f,0x3f,0x3f,0x00
    [byte[]] $request2 = 0x00,0x00,0x00,0xe8,0xfe,0x53,0x4d,0x42,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x24,0x00,0x05,0x00,0x01,0x00,0x00,0x00,0x7f,0x00,0x00,0x00,0xa7,0x22,0x57,0x31,0xd9,0x03,0xec,0x11,0x92,0x65,0x3c,0x58,0xc2,0x75,0xac,0xfa,0x70,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x02,0x02,0x10,0x02,0x00,0x03,0x02,0x03,0x11,0x03,0x00,0x00,0x01,0x00,0x26,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x20,0x00,0x01,0x00,0x06,0x41,0x15,0xa2,0x9b,0x6f,0x7a,0x8f,0xda,0xa7,0xe9,0xf3,0xed,0xa8,0x10,0x31,0x88,0x74,0x9e,0x53,0xaf,0xf7,0x92,0x36,0x38,0x8d,0x99,0xe6,0x0a,0x27,0x4b,0x84,0x00,0x00,0x02,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x02,0x00,0x01,0x00,0x00,0x00,0x03,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x04,0x00,0x02,0x00,0x03,0x00,0x01,0x00,0x05,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x31,0x00,0x39,0x00,0x32,0x00,0x2e,0x00,0x31,0x00,0x36,0x00,0x38,0x00,0x2e,0x00,0x36,0x00,0x2e,0x00,0x36,0x00,0x30,0x00
    [byte[]] $request3 = 0x00,0x00,0x00,0xa2,0xfe,0x53,0x4d,0x42,0x40,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x21,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x19,0x00,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x00,0x4a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x48,0x06,0x06,0x2b,0x06,0x01,0x05,0x05,0x02,0xa0,0x3e,0x30,0x3c,0xa0,0x0e,0x30,0x0c,0x06,0x0a,0x2b,0x06,0x01,0x04,0x01,0x82,0x37,0x02,0x02,0x0a,0xa2,0x2a,0x04,0x28,0x4e,0x54,0x4c,0x4d,0x53,0x53,0x50,0x00,0x01,0x00,0x00,0x00,0x97,0x82,0x08,0xe2,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x61,0x4a,0x00,0x00,0x00,0x0f

    try {
        $tcpClient = New-Object Net.Sockets.TcpClient
        $connect = $tcpClient.BeginConnect($ComputerName, 445, $null, $null)
        $success = $connect.AsyncWaitHandle.WaitOne([TimeSpan]::FromMilliseconds(1000), $false)
        if (-not $success) {
            Write-Verbose "[$ComputerName] Host is unreachable."
            return
        }
        $tcpClient.EndConnect($connect)
        $ns = $tcpClient.GetStream()
        $temp = New-Object byte[] 1024
        $ns.Write($request1, 0, $request1.Length)
        $read = $ns.Read($temp, 0, $temp.Length)
        $ns.Write($request2, 0, $request2.Length)
        $read = $ns.Read($temp, 0, $temp.Length)
        $ns.Write($request3, 0, $request3.Length)
        $read = $ns.Read($temp, 0, $temp.Length)
        $blob_offset = [BitConverter]::ToInt16($temp, 72)
        $blob_offset += 4;
        $ntlm_provider_offset = $blob_offset + 31
        $target_name_length = [BitConverter]::ToInt16($temp, $ntlm_provider_offset + 12)
        if ($target_name_length -eq 0) {
            $ntlm_provider_offset = $blob_offset + 33
            $target_name_length = [BitConverter]::ToInt16($temp, $ntlm_provider_offset + 12)
        }
        #$target_name_offset = [BitConverter]::ToInt32($temp, $ntlm_provider_offset + 16)
        #$hostname = [Text.Encoding]::Unicode.GetString($temp, $ntlm_provider_offset + $target_name_offset, $target_name_length)
        $version_offset = $ntlm_provider_offset + 48
        $major = $temp[$version_offset++]
        $minor = $temp[$version_offset++]
        $build = [BitConverter]::ToInt16($temp, $version_offset)
        $version = [string]::Format("{0}.{1}.{2}", $major, $minor, $build)
    }
    catch {}

    if ($version) {
        $obj = New-Object -TypeName psobject
        $obj | Add-Member -MemberType NoteProperty -Name 'ComputerName' -Value $ComputerName
        $obj | Add-Member -MemberType NoteProperty -Name 'OSVersion' -Value $version
        Write-Output $obj
    }
}
